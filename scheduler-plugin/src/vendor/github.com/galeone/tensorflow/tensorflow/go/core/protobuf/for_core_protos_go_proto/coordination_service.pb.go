// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: tensorflow/core/protobuf/coordination_service.proto

package for_core_protos_go_proto

import (
	protocol_go_proto "github.com/galeone/tensorflow/tensorflow/go/compiler/xla/pjrt/distributed/protocol_go_proto"
	device_attributes_go_proto "github.com/galeone/tensorflow/tensorflow/go/core/framework/device_attributes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a remote worker task, specified by job name and task id.
type CoordinatedTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName string `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	TaskId  int32  `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *CoordinatedTask) Reset() {
	*x = CoordinatedTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordinatedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinatedTask) ProtoMessage() {}

func (x *CoordinatedTask) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinatedTask.ProtoReflect.Descriptor instead.
func (*CoordinatedTask) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{0}
}

func (x *CoordinatedTask) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *CoordinatedTask) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

// Status payload for all coordination service errors.
// Note: an empty proto may be set if the error is triggered by the task's own
// agent calls (i.e. not propagated by the service from another remote task).
type CoordinationServiceError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, error is reported via the agent API by the user (and not an
	// internal service error).
	IsReportedError bool `protobuf:"varint,3,opt,name=is_reported_error,json=isReportedError,proto3" json:"is_reported_error,omitempty"`
	// Denotes which task hit the error. If unset, the error originated from the
	// same task that is processing this error.
	SourceTask *CoordinatedTask `protobuf:"bytes,4,opt,name=source_task,json=sourceTask,proto3" json:"source_task,omitempty"`
}

func (x *CoordinationServiceError) Reset() {
	*x = CoordinationServiceError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordinationServiceError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinationServiceError) ProtoMessage() {}

func (x *CoordinationServiceError) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinationServiceError.ProtoReflect.Descriptor instead.
func (*CoordinationServiceError) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{1}
}

func (x *CoordinationServiceError) GetIsReportedError() bool {
	if x != nil {
		return x.IsReportedError
	}
	return false
}

func (x *CoordinationServiceError) GetSourceTask() *CoordinatedTask {
	if x != nil {
		return x.SourceTask
	}
	return nil
}

// Represent device information from different runtimes.
type TfDeviceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*device_attributes_go_proto.DeviceAttributes `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *TfDeviceList) Reset() {
	*x = TfDeviceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TfDeviceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TfDeviceList) ProtoMessage() {}

func (x *TfDeviceList) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TfDeviceList.ProtoReflect.Descriptor instead.
func (*TfDeviceList) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{2}
}

func (x *TfDeviceList) GetDevices() []*device_attributes_go_proto.DeviceAttributes {
	if x != nil {
		return x.Devices
	}
	return nil
}

type XlaDeviceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices *protocol_go_proto.GlobalTopologyProto `protobuf:"bytes,1,opt,name=devices,proto3" json:"devices,omitempty"`
}

func (x *XlaDeviceList) Reset() {
	*x = XlaDeviceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XlaDeviceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XlaDeviceList) ProtoMessage() {}

func (x *XlaDeviceList) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XlaDeviceList.ProtoReflect.Descriptor instead.
func (*XlaDeviceList) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{3}
}

func (x *XlaDeviceList) GetDevices() *protocol_go_proto.GlobalTopologyProto {
	if x != nil {
		return x.Devices
	}
	return nil
}

type CoordinationServiceDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*CoordinationServiceDeviceInfo_Tf
	//	*CoordinationServiceDeviceInfo_Xla
	Type isCoordinationServiceDeviceInfo_Type `protobuf_oneof:"type"`
}

func (x *CoordinationServiceDeviceInfo) Reset() {
	*x = CoordinationServiceDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordinationServiceDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinationServiceDeviceInfo) ProtoMessage() {}

func (x *CoordinationServiceDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinationServiceDeviceInfo.ProtoReflect.Descriptor instead.
func (*CoordinationServiceDeviceInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{4}
}

func (m *CoordinationServiceDeviceInfo) GetType() isCoordinationServiceDeviceInfo_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *CoordinationServiceDeviceInfo) GetTf() *TfDeviceList {
	if x, ok := x.GetType().(*CoordinationServiceDeviceInfo_Tf); ok {
		return x.Tf
	}
	return nil
}

func (x *CoordinationServiceDeviceInfo) GetXla() *XlaDeviceList {
	if x, ok := x.GetType().(*CoordinationServiceDeviceInfo_Xla); ok {
		return x.Xla
	}
	return nil
}

type isCoordinationServiceDeviceInfo_Type interface {
	isCoordinationServiceDeviceInfo_Type()
}

type CoordinationServiceDeviceInfo_Tf struct {
	Tf *TfDeviceList `protobuf:"bytes,1,opt,name=tf,proto3,oneof"`
}

type CoordinationServiceDeviceInfo_Xla struct {
	Xla *XlaDeviceList `protobuf:"bytes,2,opt,name=xla,proto3,oneof"`
}

func (*CoordinationServiceDeviceInfo_Tf) isCoordinationServiceDeviceInfo_Type() {}

func (*CoordinationServiceDeviceInfo_Xla) isCoordinationServiceDeviceInfo_Type() {}

// Request and response messages for registering a task to the cluster leader.
// A task is uniquely represented by its `job_name`, `task_id` and
// `incarnation`. Leader responds with its `incarnation` to identify a leader
// process.
type RegisterTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Incarnation uint64           `protobuf:"fixed64,3,opt,name=incarnation,proto3" json:"incarnation,omitempty"`
	SourceTask  *CoordinatedTask `protobuf:"bytes,5,opt,name=source_task,json=sourceTask,proto3" json:"source_task,omitempty"`
}

func (x *RegisterTaskRequest) Reset() {
	*x = RegisterTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTaskRequest) ProtoMessage() {}

func (x *RegisterTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTaskRequest.ProtoReflect.Descriptor instead.
func (*RegisterTaskRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterTaskRequest) GetIncarnation() uint64 {
	if x != nil {
		return x.Incarnation
	}
	return 0
}

func (x *RegisterTaskRequest) GetSourceTask() *CoordinatedTask {
	if x != nil {
		return x.SourceTask
	}
	return nil
}

type RegisterTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderIncarnation uint64 `protobuf:"fixed64,1,opt,name=leader_incarnation,json=leaderIncarnation,proto3" json:"leader_incarnation,omitempty"`
}

func (x *RegisterTaskResponse) Reset() {
	*x = RegisterTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTaskResponse) ProtoMessage() {}

func (x *RegisterTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTaskResponse.ProtoReflect.Descriptor instead.
func (*RegisterTaskResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterTaskResponse) GetLeaderIncarnation() uint64 {
	if x != nil {
		return x.LeaderIncarnation
	}
	return 0
}

// Request and response messages for sending heartbeats.
type HeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Incarnation uint64           `protobuf:"fixed64,3,opt,name=incarnation,proto3" json:"incarnation,omitempty"`
	SourceTask  *CoordinatedTask `protobuf:"bytes,4,opt,name=source_task,json=sourceTask,proto3" json:"source_task,omitempty"`
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{7}
}

func (x *HeartbeatRequest) GetIncarnation() uint64 {
	if x != nil {
		return x.Incarnation
	}
	return 0
}

func (x *HeartbeatRequest) GetSourceTask() *CoordinatedTask {
	if x != nil {
		return x.SourceTask
	}
	return nil
}

type HeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderIncarnation uint64 `protobuf:"fixed64,1,opt,name=leader_incarnation,json=leaderIncarnation,proto3" json:"leader_incarnation,omitempty"`
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{8}
}

func (x *HeartbeatResponse) GetLeaderIncarnation() uint64 {
	if x != nil {
		return x.LeaderIncarnation
	}
	return 0
}

// Request and response messages for waiting for all tasks.
type WaitForAllTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All local device attributes on the request sender.
	LocalDeviceInfo *CoordinationServiceDeviceInfo `protobuf:"bytes,4,opt,name=local_device_info,json=localDeviceInfo,proto3" json:"local_device_info,omitempty"`
	SourceTask      *CoordinatedTask               `protobuf:"bytes,5,opt,name=source_task,json=sourceTask,proto3" json:"source_task,omitempty"`
}

func (x *WaitForAllTasksRequest) Reset() {
	*x = WaitForAllTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForAllTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForAllTasksRequest) ProtoMessage() {}

func (x *WaitForAllTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForAllTasksRequest.ProtoReflect.Descriptor instead.
func (*WaitForAllTasksRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{9}
}

func (x *WaitForAllTasksRequest) GetLocalDeviceInfo() *CoordinationServiceDeviceInfo {
	if x != nil {
		return x.LocalDeviceInfo
	}
	return nil
}

func (x *WaitForAllTasksRequest) GetSourceTask() *CoordinatedTask {
	if x != nil {
		return x.SourceTask
	}
	return nil
}

type WaitForAllTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderIncarnation uint64 `protobuf:"fixed64,1,opt,name=leader_incarnation,json=leaderIncarnation,proto3" json:"leader_incarnation,omitempty"`
	// All devices in the cluster.
	ClusterDeviceInfo *CoordinationServiceDeviceInfo `protobuf:"bytes,3,opt,name=cluster_device_info,json=clusterDeviceInfo,proto3" json:"cluster_device_info,omitempty"`
}

func (x *WaitForAllTasksResponse) Reset() {
	*x = WaitForAllTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForAllTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForAllTasksResponse) ProtoMessage() {}

func (x *WaitForAllTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForAllTasksResponse.ProtoReflect.Descriptor instead.
func (*WaitForAllTasksResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{10}
}

func (x *WaitForAllTasksResponse) GetLeaderIncarnation() uint64 {
	if x != nil {
		return x.LeaderIncarnation
	}
	return 0
}

func (x *WaitForAllTasksResponse) GetClusterDeviceInfo() *CoordinationServiceDeviceInfo {
	if x != nil {
		return x.ClusterDeviceInfo
	}
	return nil
}

// Request and response messages for disconnecting a task from the service.
type ShutdownTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceTask *CoordinatedTask `protobuf:"bytes,1,opt,name=source_task,json=sourceTask,proto3" json:"source_task,omitempty"`
}

func (x *ShutdownTaskRequest) Reset() {
	*x = ShutdownTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownTaskRequest) ProtoMessage() {}

func (x *ShutdownTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownTaskRequest.ProtoReflect.Descriptor instead.
func (*ShutdownTaskRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{11}
}

func (x *ShutdownTaskRequest) GetSourceTask() *CoordinatedTask {
	if x != nil {
		return x.SourceTask
	}
	return nil
}

type ShutdownTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownTaskResponse) Reset() {
	*x = ShutdownTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownTaskResponse) ProtoMessage() {}

func (x *ShutdownTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownTaskResponse.ProtoReflect.Descriptor instead.
func (*ShutdownTaskResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{12}
}

// Request and response messages for resetting a task state in the service.
type ResetTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceTask *CoordinatedTask `protobuf:"bytes,1,opt,name=source_task,json=sourceTask,proto3" json:"source_task,omitempty"`
}

func (x *ResetTaskRequest) Reset() {
	*x = ResetTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetTaskRequest) ProtoMessage() {}

func (x *ResetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetTaskRequest.ProtoReflect.Descriptor instead.
func (*ResetTaskRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{13}
}

func (x *ResetTaskRequest) GetSourceTask() *CoordinatedTask {
	if x != nil {
		return x.SourceTask
	}
	return nil
}

type ResetTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetTaskResponse) Reset() {
	*x = ResetTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetTaskResponse) ProtoMessage() {}

func (x *ResetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetTaskResponse.ProtoReflect.Descriptor instead.
func (*ResetTaskResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{14}
}

// Request and response messages for reporting errors to task.
type ReportErrorToTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32                     `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string                    `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ErrorPayload *CoordinationServiceError `protobuf:"bytes,5,opt,name=error_payload,json=errorPayload,proto3" json:"error_payload,omitempty"`
}

func (x *ReportErrorToTaskRequest) Reset() {
	*x = ReportErrorToTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportErrorToTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportErrorToTaskRequest) ProtoMessage() {}

func (x *ReportErrorToTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportErrorToTaskRequest.ProtoReflect.Descriptor instead.
func (*ReportErrorToTaskRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{15}
}

func (x *ReportErrorToTaskRequest) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ReportErrorToTaskRequest) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ReportErrorToTaskRequest) GetErrorPayload() *CoordinationServiceError {
	if x != nil {
		return x.ErrorPayload
	}
	return nil
}

type ReportErrorToTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportErrorToTaskResponse) Reset() {
	*x = ReportErrorToTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportErrorToTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportErrorToTaskResponse) ProtoMessage() {}

func (x *ReportErrorToTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportErrorToTaskResponse.ProtoReflect.Descriptor instead.
func (*ReportErrorToTaskResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{16}
}

// Request and response messages for reporting errors to service instance.
type ReportErrorToServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32            `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string           `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ErrorOrigin  *CoordinatedTask `protobuf:"bytes,5,opt,name=error_origin,json=errorOrigin,proto3" json:"error_origin,omitempty"`
}

func (x *ReportErrorToServiceRequest) Reset() {
	*x = ReportErrorToServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportErrorToServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportErrorToServiceRequest) ProtoMessage() {}

func (x *ReportErrorToServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportErrorToServiceRequest.ProtoReflect.Descriptor instead.
func (*ReportErrorToServiceRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{17}
}

func (x *ReportErrorToServiceRequest) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ReportErrorToServiceRequest) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ReportErrorToServiceRequest) GetErrorOrigin() *CoordinatedTask {
	if x != nil {
		return x.ErrorOrigin
	}
	return nil
}

type ReportErrorToServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportErrorToServiceResponse) Reset() {
	*x = ReportErrorToServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportErrorToServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportErrorToServiceResponse) ProtoMessage() {}

func (x *ReportErrorToServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportErrorToServiceResponse.ProtoReflect.Descriptor instead.
func (*ReportErrorToServiceResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{18}
}

// Message for configuration key value.
// Key is structured like Unix file system, with multiple levels of directory
// names separated by the slash ('/') characters.
type KeyValueEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValueEntry) Reset() {
	*x = KeyValueEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValueEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueEntry) ProtoMessage() {}

func (x *KeyValueEntry) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueEntry.ProtoReflect.Descriptor instead.
func (*KeyValueEntry) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{19}
}

func (x *KeyValueEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValueEntry) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Request and response messages for inserting configuration key-value data.
type InsertKeyValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kv *KeyValueEntry `protobuf:"bytes,1,opt,name=kv,proto3" json:"kv,omitempty"`
}

func (x *InsertKeyValueRequest) Reset() {
	*x = InsertKeyValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertKeyValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertKeyValueRequest) ProtoMessage() {}

func (x *InsertKeyValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertKeyValueRequest.ProtoReflect.Descriptor instead.
func (*InsertKeyValueRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{20}
}

func (x *InsertKeyValueRequest) GetKv() *KeyValueEntry {
	if x != nil {
		return x.Kv
	}
	return nil
}

type InsertKeyValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InsertKeyValueResponse) Reset() {
	*x = InsertKeyValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertKeyValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertKeyValueResponse) ProtoMessage() {}

func (x *InsertKeyValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertKeyValueResponse.ProtoReflect.Descriptor instead.
func (*InsertKeyValueResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{21}
}

// Request and response messages for getting configuration key-value data.
type GetKeyValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetKeyValueRequest) Reset() {
	*x = GetKeyValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyValueRequest) ProtoMessage() {}

func (x *GetKeyValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyValueRequest.ProtoReflect.Descriptor instead.
func (*GetKeyValueRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{22}
}

func (x *GetKeyValueRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetKeyValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kv *KeyValueEntry `protobuf:"bytes,1,opt,name=kv,proto3" json:"kv,omitempty"`
}

func (x *GetKeyValueResponse) Reset() {
	*x = GetKeyValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyValueResponse) ProtoMessage() {}

func (x *GetKeyValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyValueResponse.ProtoReflect.Descriptor instead.
func (*GetKeyValueResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{23}
}

func (x *GetKeyValueResponse) GetKv() *KeyValueEntry {
	if x != nil {
		return x.Kv
	}
	return nil
}

// Request and response messages for deleting configuration key-value data.
// When is_directory is true, delete key-values recursively under `key`.
type DeleteKeyValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	IsDirectory bool   `protobuf:"varint,2,opt,name=is_directory,json=isDirectory,proto3" json:"is_directory,omitempty"`
}

func (x *DeleteKeyValueRequest) Reset() {
	*x = DeleteKeyValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeyValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyValueRequest) ProtoMessage() {}

func (x *DeleteKeyValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyValueRequest.ProtoReflect.Descriptor instead.
func (*DeleteKeyValueRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteKeyValueRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DeleteKeyValueRequest) GetIsDirectory() bool {
	if x != nil {
		return x.IsDirectory
	}
	return false
}

type DeleteKeyValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteKeyValueResponse) Reset() {
	*x = DeleteKeyValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeyValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyValueResponse) ProtoMessage() {}

func (x *DeleteKeyValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyValueResponse.ProtoReflect.Descriptor instead.
func (*DeleteKeyValueResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{25}
}

// Request and response messages for generic sync barriers.
type BarrierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BarrierId          string `protobuf:"bytes,1,opt,name=barrier_id,json=barrierId,proto3" json:"barrier_id,omitempty"`
	BarrierTimeoutInMs int64  `protobuf:"varint,2,opt,name=barrier_timeout_in_ms,json=barrierTimeoutInMs,proto3" json:"barrier_timeout_in_ms,omitempty"`
	// Denotes list of tasks that will wait for the barrier. If unspecified, it
	// implies that the entire cluster is participating in the barrier.
	Tasks []*CoordinatedTask `protobuf:"bytes,3,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// Task that is making the request.
	SourceTask *CoordinatedTask `protobuf:"bytes,4,opt,name=source_task,json=sourceTask,proto3" json:"source_task,omitempty"`
}

func (x *BarrierRequest) Reset() {
	*x = BarrierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarrierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarrierRequest) ProtoMessage() {}

func (x *BarrierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarrierRequest.ProtoReflect.Descriptor instead.
func (*BarrierRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{26}
}

func (x *BarrierRequest) GetBarrierId() string {
	if x != nil {
		return x.BarrierId
	}
	return ""
}

func (x *BarrierRequest) GetBarrierTimeoutInMs() int64 {
	if x != nil {
		return x.BarrierTimeoutInMs
	}
	return 0
}

func (x *BarrierRequest) GetTasks() []*CoordinatedTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *BarrierRequest) GetSourceTask() *CoordinatedTask {
	if x != nil {
		return x.SourceTask
	}
	return nil
}

type BarrierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BarrierResponse) Reset() {
	*x = BarrierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarrierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarrierResponse) ProtoMessage() {}

func (x *BarrierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarrierResponse.ProtoReflect.Descriptor instead.
func (*BarrierResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{27}
}

// Request and response messages for  cancelling generic sync barriers.
type CancelBarrierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BarrierId string `protobuf:"bytes,1,opt,name=barrier_id,json=barrierId,proto3" json:"barrier_id,omitempty"`
	// Task that is making the request.
	SourceTask *CoordinatedTask `protobuf:"bytes,2,opt,name=source_task,json=sourceTask,proto3" json:"source_task,omitempty"`
}

func (x *CancelBarrierRequest) Reset() {
	*x = CancelBarrierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBarrierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBarrierRequest) ProtoMessage() {}

func (x *CancelBarrierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBarrierRequest.ProtoReflect.Descriptor instead.
func (*CancelBarrierRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{28}
}

func (x *CancelBarrierRequest) GetBarrierId() string {
	if x != nil {
		return x.BarrierId
	}
	return ""
}

func (x *CancelBarrierRequest) GetSourceTask() *CoordinatedTask {
	if x != nil {
		return x.SourceTask
	}
	return nil
}

type CancelBarrierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelBarrierResponse) Reset() {
	*x = CancelBarrierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBarrierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBarrierResponse) ProtoMessage() {}

func (x *CancelBarrierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBarrierResponse.ProtoReflect.Descriptor instead.
func (*CancelBarrierResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP(), []int{29}
}

var File_tensorflow_core_protobuf_coordination_service_proto protoreflect.FileDescriptor

var file_tensorflow_core_protobuf_coordination_service_proto_rawDesc = []byte{
	0x0a, 0x33, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x1a, 0x37, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x70, 0x6a, 0x72, 0x74, 0x2f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a,
	0x0f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x46, 0x0a, 0x0c, 0x54, 0x66, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22,
	0x43, 0x0a, 0x0d, 0x58, 0x6c, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x54, 0x66, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x02,
	0x74, 0x66, 0x12, 0x2d, 0x0a, 0x03, 0x78, 0x6c, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x58, 0x6c, 0x61,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x78, 0x6c,
	0x61, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08,
	0x04, 0x10, 0x05, 0x22, 0x45, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x10, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x42, 0x0a, 0x11, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbf,
	0x01, 0x0a, 0x16, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x11, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x22, 0xa9, 0x01, 0x0a, 0x17, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x13, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x53, 0x0a, 0x13,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x13, 0x0a, 0x11, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xb5, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x49, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0b, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a,
	0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x42,
	0x0a, 0x15, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x02, 0x6b, 0x76, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02,
	0x6b, 0x76, 0x22, 0x18, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x40, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x6b,
	0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x02, 0x6b, 0x76, 0x22, 0x4c, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3,
	0x01, 0x0a, 0x0e, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x15, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49,
	0x6e, 0x4d, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x22, 0x11, 0x0a, 0x0f, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x17, 0x0a, 0x15,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x94, 0x08, 0x0a, 0x13, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a,
	0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1f, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x1c, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x57, 0x61,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x22, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57,
	0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1f, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x27, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x54, 0x5a, 0x52,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x61, 0x6c, 0x65, 0x6f,
	0x6e, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_protobuf_coordination_service_proto_rawDescOnce sync.Once
	file_tensorflow_core_protobuf_coordination_service_proto_rawDescData = file_tensorflow_core_protobuf_coordination_service_proto_rawDesc
)

func file_tensorflow_core_protobuf_coordination_service_proto_rawDescGZIP() []byte {
	file_tensorflow_core_protobuf_coordination_service_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_protobuf_coordination_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_protobuf_coordination_service_proto_rawDescData)
	})
	return file_tensorflow_core_protobuf_coordination_service_proto_rawDescData
}

var file_tensorflow_core_protobuf_coordination_service_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_tensorflow_core_protobuf_coordination_service_proto_goTypes = []interface{}{
	(*CoordinatedTask)(nil),                             // 0: tensorflow.CoordinatedTask
	(*CoordinationServiceError)(nil),                    // 1: tensorflow.CoordinationServiceError
	(*TfDeviceList)(nil),                                // 2: tensorflow.TfDeviceList
	(*XlaDeviceList)(nil),                               // 3: tensorflow.XlaDeviceList
	(*CoordinationServiceDeviceInfo)(nil),               // 4: tensorflow.CoordinationServiceDeviceInfo
	(*RegisterTaskRequest)(nil),                         // 5: tensorflow.RegisterTaskRequest
	(*RegisterTaskResponse)(nil),                        // 6: tensorflow.RegisterTaskResponse
	(*HeartbeatRequest)(nil),                            // 7: tensorflow.HeartbeatRequest
	(*HeartbeatResponse)(nil),                           // 8: tensorflow.HeartbeatResponse
	(*WaitForAllTasksRequest)(nil),                      // 9: tensorflow.WaitForAllTasksRequest
	(*WaitForAllTasksResponse)(nil),                     // 10: tensorflow.WaitForAllTasksResponse
	(*ShutdownTaskRequest)(nil),                         // 11: tensorflow.ShutdownTaskRequest
	(*ShutdownTaskResponse)(nil),                        // 12: tensorflow.ShutdownTaskResponse
	(*ResetTaskRequest)(nil),                            // 13: tensorflow.ResetTaskRequest
	(*ResetTaskResponse)(nil),                           // 14: tensorflow.ResetTaskResponse
	(*ReportErrorToTaskRequest)(nil),                    // 15: tensorflow.ReportErrorToTaskRequest
	(*ReportErrorToTaskResponse)(nil),                   // 16: tensorflow.ReportErrorToTaskResponse
	(*ReportErrorToServiceRequest)(nil),                 // 17: tensorflow.ReportErrorToServiceRequest
	(*ReportErrorToServiceResponse)(nil),                // 18: tensorflow.ReportErrorToServiceResponse
	(*KeyValueEntry)(nil),                               // 19: tensorflow.KeyValueEntry
	(*InsertKeyValueRequest)(nil),                       // 20: tensorflow.InsertKeyValueRequest
	(*InsertKeyValueResponse)(nil),                      // 21: tensorflow.InsertKeyValueResponse
	(*GetKeyValueRequest)(nil),                          // 22: tensorflow.GetKeyValueRequest
	(*GetKeyValueResponse)(nil),                         // 23: tensorflow.GetKeyValueResponse
	(*DeleteKeyValueRequest)(nil),                       // 24: tensorflow.DeleteKeyValueRequest
	(*DeleteKeyValueResponse)(nil),                      // 25: tensorflow.DeleteKeyValueResponse
	(*BarrierRequest)(nil),                              // 26: tensorflow.BarrierRequest
	(*BarrierResponse)(nil),                             // 27: tensorflow.BarrierResponse
	(*CancelBarrierRequest)(nil),                        // 28: tensorflow.CancelBarrierRequest
	(*CancelBarrierResponse)(nil),                       // 29: tensorflow.CancelBarrierResponse
	(*device_attributes_go_proto.DeviceAttributes)(nil), // 30: tensorflow.DeviceAttributes
	(*protocol_go_proto.GlobalTopologyProto)(nil),       // 31: xla.GlobalTopologyProto
}
var file_tensorflow_core_protobuf_coordination_service_proto_depIdxs = []int32{
	0,  // 0: tensorflow.CoordinationServiceError.source_task:type_name -> tensorflow.CoordinatedTask
	30, // 1: tensorflow.TfDeviceList.devices:type_name -> tensorflow.DeviceAttributes
	31, // 2: tensorflow.XlaDeviceList.devices:type_name -> xla.GlobalTopologyProto
	2,  // 3: tensorflow.CoordinationServiceDeviceInfo.tf:type_name -> tensorflow.TfDeviceList
	3,  // 4: tensorflow.CoordinationServiceDeviceInfo.xla:type_name -> tensorflow.XlaDeviceList
	0,  // 5: tensorflow.RegisterTaskRequest.source_task:type_name -> tensorflow.CoordinatedTask
	0,  // 6: tensorflow.HeartbeatRequest.source_task:type_name -> tensorflow.CoordinatedTask
	4,  // 7: tensorflow.WaitForAllTasksRequest.local_device_info:type_name -> tensorflow.CoordinationServiceDeviceInfo
	0,  // 8: tensorflow.WaitForAllTasksRequest.source_task:type_name -> tensorflow.CoordinatedTask
	4,  // 9: tensorflow.WaitForAllTasksResponse.cluster_device_info:type_name -> tensorflow.CoordinationServiceDeviceInfo
	0,  // 10: tensorflow.ShutdownTaskRequest.source_task:type_name -> tensorflow.CoordinatedTask
	0,  // 11: tensorflow.ResetTaskRequest.source_task:type_name -> tensorflow.CoordinatedTask
	1,  // 12: tensorflow.ReportErrorToTaskRequest.error_payload:type_name -> tensorflow.CoordinationServiceError
	0,  // 13: tensorflow.ReportErrorToServiceRequest.error_origin:type_name -> tensorflow.CoordinatedTask
	19, // 14: tensorflow.InsertKeyValueRequest.kv:type_name -> tensorflow.KeyValueEntry
	19, // 15: tensorflow.GetKeyValueResponse.kv:type_name -> tensorflow.KeyValueEntry
	0,  // 16: tensorflow.BarrierRequest.tasks:type_name -> tensorflow.CoordinatedTask
	0,  // 17: tensorflow.BarrierRequest.source_task:type_name -> tensorflow.CoordinatedTask
	0,  // 18: tensorflow.CancelBarrierRequest.source_task:type_name -> tensorflow.CoordinatedTask
	5,  // 19: tensorflow.CoordinationService.RegisterTask:input_type -> tensorflow.RegisterTaskRequest
	7,  // 20: tensorflow.CoordinationService.Heartbeat:input_type -> tensorflow.HeartbeatRequest
	9,  // 21: tensorflow.CoordinationService.WaitForAllTasks:input_type -> tensorflow.WaitForAllTasksRequest
	11, // 22: tensorflow.CoordinationService.ShutdownTask:input_type -> tensorflow.ShutdownTaskRequest
	13, // 23: tensorflow.CoordinationService.ResetTask:input_type -> tensorflow.ResetTaskRequest
	15, // 24: tensorflow.CoordinationService.ReportErrorToTask:input_type -> tensorflow.ReportErrorToTaskRequest
	17, // 25: tensorflow.CoordinationService.ReportErrorToService:input_type -> tensorflow.ReportErrorToServiceRequest
	20, // 26: tensorflow.CoordinationService.InsertKeyValue:input_type -> tensorflow.InsertKeyValueRequest
	22, // 27: tensorflow.CoordinationService.GetKeyValue:input_type -> tensorflow.GetKeyValueRequest
	24, // 28: tensorflow.CoordinationService.DeleteKeyValue:input_type -> tensorflow.DeleteKeyValueRequest
	26, // 29: tensorflow.CoordinationService.Barrier:input_type -> tensorflow.BarrierRequest
	28, // 30: tensorflow.CoordinationService.CancelBarrier:input_type -> tensorflow.CancelBarrierRequest
	6,  // 31: tensorflow.CoordinationService.RegisterTask:output_type -> tensorflow.RegisterTaskResponse
	8,  // 32: tensorflow.CoordinationService.Heartbeat:output_type -> tensorflow.HeartbeatResponse
	10, // 33: tensorflow.CoordinationService.WaitForAllTasks:output_type -> tensorflow.WaitForAllTasksResponse
	12, // 34: tensorflow.CoordinationService.ShutdownTask:output_type -> tensorflow.ShutdownTaskResponse
	14, // 35: tensorflow.CoordinationService.ResetTask:output_type -> tensorflow.ResetTaskResponse
	16, // 36: tensorflow.CoordinationService.ReportErrorToTask:output_type -> tensorflow.ReportErrorToTaskResponse
	18, // 37: tensorflow.CoordinationService.ReportErrorToService:output_type -> tensorflow.ReportErrorToServiceResponse
	21, // 38: tensorflow.CoordinationService.InsertKeyValue:output_type -> tensorflow.InsertKeyValueResponse
	23, // 39: tensorflow.CoordinationService.GetKeyValue:output_type -> tensorflow.GetKeyValueResponse
	25, // 40: tensorflow.CoordinationService.DeleteKeyValue:output_type -> tensorflow.DeleteKeyValueResponse
	27, // 41: tensorflow.CoordinationService.Barrier:output_type -> tensorflow.BarrierResponse
	29, // 42: tensorflow.CoordinationService.CancelBarrier:output_type -> tensorflow.CancelBarrierResponse
	31, // [31:43] is the sub-list for method output_type
	19, // [19:31] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_tensorflow_core_protobuf_coordination_service_proto_init() }
func file_tensorflow_core_protobuf_coordination_service_proto_init() {
	if File_tensorflow_core_protobuf_coordination_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordinatedTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordinationServiceError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TfDeviceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XlaDeviceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordinationServiceDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForAllTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForAllTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportErrorToTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportErrorToTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportErrorToServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportErrorToServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValueEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertKeyValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertKeyValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeyValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeyValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarrierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarrierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBarrierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBarrierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_core_protobuf_coordination_service_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*CoordinationServiceDeviceInfo_Tf)(nil),
		(*CoordinationServiceDeviceInfo_Xla)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_protobuf_coordination_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tensorflow_core_protobuf_coordination_service_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_protobuf_coordination_service_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_protobuf_coordination_service_proto_msgTypes,
	}.Build()
	File_tensorflow_core_protobuf_coordination_service_proto = out.File
	file_tensorflow_core_protobuf_coordination_service_proto_rawDesc = nil
	file_tensorflow_core_protobuf_coordination_service_proto_goTypes = nil
	file_tensorflow_core_protobuf_coordination_service_proto_depIdxs = nil
}
